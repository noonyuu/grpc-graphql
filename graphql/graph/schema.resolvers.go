package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"

	"github.com/noonyuu/grpc-graphql/graphql/graph/model"
	"github.com/noonyuu/grpc-graphql/graphql/pb"
	"github.com/noonyuu/grpc-graphql/graphql/userservice"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	params := pb.CreateUserParams{Name: input.Name, Age: int64(input.Age)}
	res, err := userservice.Client.CreateUser(ctx, &params)

	if err != nil {
		return nil, err
	}

	user := model.User{ID: res.Id, Name: res.Name, Age: input.Age}

	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UserAttributes) (*model.User, error) {
	params := pb.UpdateUserParams{Id: input.ID, Name: input.Name, Age: int64(input.Age)}
	res, err := userservice.Client.UpdateUser(ctx, &params)

	if err != nil {
		return nil, err
	}

	user := model.User{ID: res.Id, Name: res.Name, Age: input.Age}

	return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	res, err := userservice.Client.GetUsers(context.Background(), &pb.GetUsersParams{})

	if err != nil {
		return nil, err
	}

	users := make([]*model.User, len(res.Users))

	for i, user := range res.Users {
		users[i] = &model.User{ID: user.Id, Name: user.Name, Age: int(user.Age)}
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }